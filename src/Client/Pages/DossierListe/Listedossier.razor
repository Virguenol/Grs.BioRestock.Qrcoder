@page "/DossierListe/liste_dossiers"
@using Grs.BioRestock.Shared.Enums.Demande;
@using Grs.BioRestock.Transfer.DataModels.Demande;
@using Grs.BioRestock.Transfer.DataModels.Document;
@using System.IO;
@using Microsoft.AspNetCore.Components.Rendering;
@using Microsoft.AspNetCore.SignalR.Client;


<MudLayout Class="align-center justify-center">
    <MudCardContent Class="d-flex flex-grow-1">
        <MudIconButton Icon="@Icons.Material.Filled.CreateNewFolder" OnClick="@(() => InvokeModal(null))" />
        <MudSpacer/>
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </MudCardContent>

    <MudText Typo="Typo.h5">Liste Dossieur</MudText>
    <MudDivider DividerType="DividerType.Inset" />
    <MudPaper Class="d-flex align-center justify-center mud-width-full">
    </MudPaper>

    <MudCardContent>
        <MudGrid>
            @foreach (var item in allDocument)
            {
              <MudItem xs="3">
@*                    <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
*@                        <MudCard Class="d-flex align-center justify-center mud-width-full py-1">
                            <div Class="d-flex flex-column flex-grow-1">
                                    <MudCardContent Class="d-flex align-center justify-center mud-width-full py-0">
                                        <MudIconButton Icon="@Icons.Material.Filled.Folder" OnClick="@(() => ListeFichier(item.Id))" />
                                    </MudCardContent>
                                    <MudCardActions Class="d-flex flex-grow-1">
                                        <MudText Typo="Typo.overline">@item.Titre</MudText>
                                        <MudSpacer />
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => SupprimerDemande(item.Id))" />
                                        <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@(() => InvokeModal(Convert.ToString(item.Id)))" />
                                    </MudCardActions>
                            </div>
                            </MudCard>
@*                        </MudPaper>  
*@                </MudItem>
            }
        </MudGrid>
    </MudCardContent>

   
</MudLayout>

         


@code {

    private bool _loaded;
    private string _searchString = "";

    private DemandeStatut statutSigner = DemandeStatut.Signé;
    private DemandeStatut statutAnnuler = DemandeStatut.Annulé;
    private DemandeStatut statutNouveau = DemandeStatut.Nouveau;

    [CascadingParameter] private HubConnection HubConnection { get; set; }

    [Inject] private IDocumentClient _documentClient { get; set; }
    [Inject] private IDemandeClient _demandeClient { get; set; }

    //[Parameter] public int IdDocument { get; set; }

    //protected DocumentDto document { get; set; }

    //protected List<DocumentDto> allDocument { get; set; } = new();

    protected List<DemandeSignatureDto> allDocument { get; set; } = new();
    protected DemandeSignatureDto DemandeSignature { get; set; }
    protected DemandeSignatureDto dossier { get; set; }


    protected override async Task OnInitializedAsync()
    {
        HubConnection = HubConnection.TryInitialize(_navigationManager);
        if (HubConnection.State == HubConnectionState.Disconnected)
        {
            await HubConnection.StartAsync();
        }
        await GetAllDemande();
    }

    private async Task GetAllDemande()
    {
        _loaded = true;
        try
        {
            var response = await _demandeClient.GetAllAsync();
            if (response.Succeeded)
            {
                allDocument = response.Data.ToList();
            }
        }
        catch (Exception)
        {
            throw;
        }
        _loaded = false;
    }
   
    private async Task InvokeModal(string id = null)
    {
        var parameters = new DialogParameters();
        if (id != null)
        {
            dossier = allDocument.FirstOrDefault(d => d.Id == Convert.ToInt32(id));
            if (dossier != null)
            {
                parameters.Add(nameof(AddEditModalDossier.ModelDossier), new DemandeSignatureDto
                    {
                        Id = dossier.Id,
                        Titre = dossier.Titre,
                    });
            }
        }
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, DisableBackdropClick = true };
        var dialog = _dialogService.Show<AddEditModalDossier>(id == null ? Localizer["Create"] : Localizer["Edit"], parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            OnSearch("");
            await GetAllDemande();
        }
    }

    private bool Search(DemandeSignatureDto demande)
    {
        if (string.IsNullOrWhiteSpace(_searchString)) return true;
        if (demande.Titre?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
        {
            return true;
        }
        return false;
    }

    private void OnSearch(string text)
    {
        _searchString = text;
        //_table.ReloadServerData();
    }

    private void ListeFichier(int Id)
    {
        _navigationManager.NavigateTo($"/DossieListe/liste_dossier/{Id}");
    }

    public async Task SupprimerDemande(int fichierId)
    {
        string deleteContent = Localizer["voulez vous Supprimer"];
        var parameters = new DialogParameters
        {
          { nameof(Shared.Dialogs.DeleteConfirmationDialog.ContentText), string.Format(deleteContent, fichierId) }
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };
        var dialog = _dialogService.Show<Shared.Dialogs.DeleteConfirmationDialog>(Localizer["Delete"], parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var response = await _demandeClient.DeleteAsync(fichierId);
            if (response == null)
            {
                _snackBar.Add(response.Messages[0], Severity.Success);
                await GetAllDemande();
            }
            else
            {
                foreach (var message in response.Messages)
                {
                    _snackBar.Add(message, Severity.Error);
                }
            }
        }
    }
}
