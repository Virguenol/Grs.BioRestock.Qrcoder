@page "/DossierListe/liste_dossiers"
@using Grs.BioRestock.Shared.Enums.Demande;
@using Grs.BioRestock.Transfer.DataModels.Demande;
@using Grs.BioRestock.Transfer.DataModels.Document;
@using System.IO;
@using Microsoft.AspNetCore.Components.Rendering;

<MudLayout>
    @foreach (var item in allDemandeSignature)
    {
        <MudTreeView @bind-SelectedValue="SelectedValue" Hover="true">
            <MudTreeViewItem @bind-Expanded="@folderOneExpanded" Value="@(".devcode")" Icon="@(folderOneExpanded ? Icons.Custom.Uncategorized.FolderOpen : Icons.Custom.Uncategorized.Folder)">
                <MudTreeViewItem Value="@("launch.json")" Icon="@Icons.Custom.FileFormats.FileCode" />
                <MudTreeViewItem Value="@("tasks.json")" Icon="@Icons.Custom.FileFormats.FileCode" />
            </MudTreeViewItem>
        </MudTreeView>
   }  
    
</MudLayout>

@code {
    private List<DirectoryInfo> _rootDirectories = new List<DirectoryInfo>();
    private Dictionary<string, List<FileInfo>> _files = new Dictionary<string, List<FileInfo>>();
    private bool _showAll = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var rootDrives = DriveInfo.GetDrives()
            .Where(drive => drive.IsReady && drive.DriveType == DriveType.Fixed)
            .Select(drive => drive.RootDirectory);

        _rootDirectories.AddRange(rootDrives);
    }
    private async Task LoadFilesAsync(DirectoryInfo directory)
    {
        var files = await Task.Run(() => directory.GetFiles());
        var subDirectories = await Task.Run(() => directory.GetDirectories());

        if (subDirectories.Length > 0)
        {
            _files.Add(directory.FullName, files.ToList());

            foreach (var subDirectory in subDirectories)
            {
                await LoadFilesAsync(subDirectory);
            }
        }
        else if (_showAll && files.Length > 0)
        {
            _files.Add(directory.FullName, files.ToList());
        }
    }

    private async Task LoadAllFilesAsync()
    {
        _files.Clear();

        foreach (var directory in _rootDirectories)
        {
            await LoadFilesAsync(directory);
        }
    }

   
    private object selectedNode;
    string folderName = "Files\\Documents\\";
    protected override void OnInitialized()
    {
        selectedNode = null;
    }
    private bool _loaded;
    private string _searchString = "";

    private DemandeStatut statutSigner = DemandeStatut.Signé;
    private DemandeStatut statutAnnuler = DemandeStatut.Annulé;
    private DemandeStatut statutNouveau = DemandeStatut.Nouveau;

    [Inject] private IDocumentClient _documentClient { get; set; }
    [Inject] private IDemandeClient _demandeClient { get; set; }

    [Parameter] public int IdDocument { get; set; }

    protected DocumentDto document { get; set; }

    protected List<DocumentDto> allDocument { get; set; } = new();

    protected List<DemandeSignatureDto> allDemandeSignature { get; set; } = new();
    public bool HasChild => allDemandeSignature != null && allDemandeSignature.Count > 0;
    //public HashSet<DemandeSignatureDto> allDemandeSignature { get; set; } = new HashSet<DemandeSignatureDto>();






    public int id { get; set; }

    //protected override async Task OnInitializedAsync()
    //{
    //    await GetAllDemande(IdDocument);
    //    await GetAllDemande();
    //}

    private async Task GetAllDemande(int id)
    {
        _loaded = true;
        try
        {
            var response = await _documentClient.GetAllGetAsync(IdDocument);
            if (response.Succeeded)
            {
                allDocument = response.Data.ToList();
            }
        }
        catch (Exception)
        {
            throw;
        }
        _loaded = false;
    }
    private async Task GetAllDemande()
    {
        _loaded = true;
        try
        {
            var response = await _demandeClient.GetAllAsync();
            if (response.Succeeded)
            {
                allDemandeSignature = response.Data.ToList();
            }
        }
        catch (Exception)
        {
            throw;
        }
        _loaded = false;
    }

    string SelectedValue { get; set; }
    bool folderOneExpanded;
    bool folderTwoExpanded;
}
