@page "/Validation_document/{valeurCode}"
@using Grs.BioRestock.Transfer.DataModels.Document;
@using Grs.BioRestock.Transfer.Requests.Identity;
@layout MainLayout
@attribute [AllowAnonymous]


<style>
    .container{
        padding-top: 25%;
    }

    .titre {
        text-align : center;
        padding-top: 50px;
        padding-bottom: 30px;
    }
</style>

<MudLayout Class="">
    <MudPaper Elevation="25">
        <MudToolBar>
            <MudText Typo="Typo.h6">Date de signature : @document.DateSignature.ToString("dd/MM/yyyy")</MudText>
            <MudSpacer />
            <MudText Typo="Typo.h6">Vérification du Document</MudText>
            <MudSpacer />
            <MudText Typo="Typo.h6">Signé par : @document.NomSignateur @document.PrenomSignateur</MudText>
        </MudToolBar>
    </MudPaper>
    <br />
    <div class="d-flex flex-grow-1 gap-1">
        @if (document.CodeSignature == valeurCode)
        {

            <div style="width:100%;height:700px;align-content:center;text-align:center;">

                <iframe src="@document.FileUrlsSigne" title="Document" />
            </div>
        }
        else
        {
            <MudText Typo="Typo.h4">le dcument n exiest pas</MudText>
        }
    </div>
</MudLayout>
@code {

    [Inject] private IDocumentClient _documentClient { get; set; }

    [Parameter] public string valeurCode { get; set; }

    protected DocumentDto document { get; set; } = new();
    private readonly UpdateProfileRequest _profileModel = new();



    protected override async Task OnInitializedAsync()
    {
        await VerificationDoc(valeurCode);
        await LoadDataAsync();
    }

    private async Task VerificationDoc(string id)
    {
        try
        {
            var raw = await _documentClient.VerifierSingatureAsync(valeurCode);
            if (raw.Succeeded)
                document = raw.Data;
        }
        catch (Exception)
        {
            throw;
        }
    }

    private async Task LoadDataAsync()
    {
        var state = await _stateProvider.GetAuthenticationStateAsync();
        var user = state.User;
        _profileModel.FirstName = user.GetFirstName();
        _profileModel.LastName = user.GetLastName();
    }
}